% Define symbolic variables
syms theta1 thetadot1 thetaddot1 ...
      theta2 thetadot2 thetaddot2 ...
      theta3 thetadot3 thetaddot3 ...
      theta4 thetadot4 thetaddot4 ...
      theta5 thetadot5 thetaddot5 ...
      theta6 thetadot6 thetaddot6 ...
      theta7 thetadot7 thetaddot7 ...
      theta8 thetadot8 thetaddot8 real
g = 9.81;
m1 = frames(1).mass;
m2 = frames(2).mass;
m3 = frames(3).mass;
m4 = frames(4).mass;
m5 = frames(5).mass;
m6 = frames(6).mass;
m7 = frames(7).mass;
m8 = frames(8).mass;

% Call the function that returns the symbolic reaction forces
Reaction_Only_3_links(frames);

% Read the CSV file
data = readmatrix('Q_history_fixedlength.csv');

% Determine the number of time steps (rows)
numSteps = size(data, 1);

% Preallocate a matrix to store time and reaction forces
LoadCellOutput= zeros(numSteps, 16);

% Loop over each row, perform substitution, and store results
for i = 1:numSteps
    % Get the actual time from the CSV (column 2)
    t = data(i, 2);
    
    % Substitute values from CSV (columns 3 to 26) into the symbolic expression
    result = double( subs(Reaction_Only_3_links(frames), ...
        {theta1, thetadot1, thetaddot1, ...
         theta2, thetadot2, thetaddot2, ...
         theta3, thetadot3, thetaddot3, ...
         theta4, thetadot4, thetaddot4, ...
         theta5, thetadot5, thetaddot5, ...
         theta6, thetadot6, thetaddot6, ...
         theta7, thetadot7, thetaddot7, ...
         theta8, thetadot8, thetaddot8}, ...
        {data(i, 3), data(i, 4), data(i, 5), ...
         data(i, 6), data(i, 7), data(i, 8), ...
         data(i, 9), data(i,10), data(i,11), ...
         data(i,12), data(i,13), data(i,14), ...
         data(i,15), data(i,16), data(i,17), ...
         data(i,18), data(i,19), data(i,20), ...
         data(i,21), data(i,22), data(i,23), ...
         data(i,24), data(i,25), data(i,26)}));
    
    % Store the time and reaction forces in the output matrix
    LoadCellOutput(i, 1) = t;
    LoadCellOutput(i, 2:end) = result;
end

% Apply vectorized operations to entire columns:
% Load cell outputs in terms of the mass. l
LoadCellOutput(:,4)  = LoadCellOutput(:,4)/g - (m8+m6+m4+m2+m1) ;      
LoadCellOutput(:,7)  = LoadCellOutput(:,7)/g - (m8+m6+m4+m2)  ;       
LoadCellOutput(:,10) = LoadCellOutput(:,10)/g - (m8+m6+m4);     
LoadCellOutput(:,13) = LoadCellOutput(:,13)/g - (m8+m6);      
LoadCellOutput(:,16) = LoadCellOutput(:,16)/g - m8  ;  s     


