{
  "Qcoordinates": [
    [
      {
        "expr": "cr",
        "vars": "cr"
      },
      {
        "expr": "crd",
        "vars": "crd"
      },
      {
        "expr": "crdd",
        "vars": "crdd"
      }
    ],
    [
      {
        "expr": "trolley",
        "vars": "trolley"
      },
      {
        "expr": "trolleyd",
        "vars": "trolleyd"
      },
      {
        "expr": "trolleydd",
        "vars": "trolleydd"
      }
    ],
    [
      {
        "expr": "theta1",
        "vars": "theta1"
      },
      {
        "expr": "thetad1",
        "vars": "thetad1"
      },
      {
        "expr": "thetadd1",
        "vars": "thetadd1"
      }
    ],
    [
      {
        "expr": "phi1",
        "vars": "phi1"
      },
      {
        "expr": "phid1",
        "vars": "phid1"
      },
      {
        "expr": "phidd1",
        "vars": "phidd1"
      }
    ],
    [
      {
        "expr": "lambda1",
        "vars": "lambda1"
      },
      {
        "expr": "lambdad1",
        "vars": "lambdad1"
      },
      {
        "expr": "lambdadd1",
        "vars": "lambdadd1"
      }
    ],
    [
      {
        "expr": "theta2",
        "vars": "theta2"
      },
      {
        "expr": "thetad2",
        "vars": "thetad2"
      },
      {
        "expr": "thetadd2",
        "vars": "thetadd2"
      }
    ],
    [
      {
        "expr": "phi2",
        "vars": "phi2"
      },
      {
        "expr": "phid2",
        "vars": "phid2"
      },
      {
        "expr": "phidd2",
        "vars": "phidd2"
      }
    ],
    [
      {
        "expr": "lambda2",
        "vars": "lambda2"
      },
      {
        "expr": "lambdad2",
        "vars": "lambdad2"
      },
      {
        "expr": "lambdadd2",
        "vars": "lambdadd2"
      }
    ]
  ],
  "initconditions": [
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ]
  ],
  "rotations": [
    {
      "axis": 3,
      "vars": "cr"
    },
    {
      "axis": 0,
      "vars": ""
    },
    {
      "axis": 3,
      "vars": "theta1"
    },
    {
      "axis": 1,
      "vars": "phi1"
    },
    {
      "axis": 0,
      "vars": ""
    },
    {
      "axis": 3,
      "vars": "theta2"
    },
    {
      "axis": 1,
      "vars": "phi2"
    },
    {
      "axis": 0,
      "vars": ""
    }
  ],
  "Mstar": [
    [
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + (3*Math.cos(phi1)**2)/40 + 82*Math.sin(phi1)**2 + 3*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 3*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + ((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 2*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5)*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) + 2*((117*Math.cos(cr))/5 - (61*Math.sin(cr))/20)*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) + ((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100)*(78624*Math.cos(cr) - 10248*Math.sin(cr)) + ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25)*(10248*Math.cos(cr) + 78624*Math.sin(cr)) + ((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100)*(687960*Math.cos(cr) - 89670*Math.sin(cr)) + ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25)*(89670*Math.cos(cr) + 687960*Math.sin(cr)) + 41*Math.cos(theta2)**2*Math.sin(phi1)**2 + ((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 123*Math.sin(phi1)**2*Math.sin(theta2)**2 + 486824041/40",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "2*((117*Math.cos(cr))/5 - (61*Math.sin(cr))/20)*(Math.sin(cr) + cr*Math.cos(cr)) - 3*(Math.sin(cr) + cr*Math.cos(cr))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - (Math.cos(cr) - cr*Math.sin(cr))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (Math.sin(cr) + cr*Math.cos(cr))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 3*(Math.cos(cr) - cr*Math.sin(cr))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 2*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5)*(Math.cos(cr) - cr*Math.sin(cr)) + (78624*Math.cos(cr) - 10248*Math.sin(cr))*(Math.sin(cr) + cr*Math.cos(cr)) - (10248*Math.cos(cr) + 78624*Math.sin(cr))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + (3*Math.cos(phi1)**2)/40 - (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 82*Math.sin(phi1)**2 + (lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 41*Math.cos(theta2)**2*Math.sin(phi1)**2 + 123*Math.sin(phi1)**2*Math.sin(theta2)**2 + 3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 1/40",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.cos(theta2)*Math.sin(phi1)*Math.sin(theta2) - 2*Math.cos(phi2)*Math.sin(theta2)*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*Math.sin(phi2)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 3*Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 3*Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)/40 + 2*Math.cos(phi2)*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + 2*Math.sin(phi2)*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.sin(phi1)*Math.sin(theta2) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*((61*Math.cos(cr))/20 + (117*Math.sin(cr))/5 - 5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + (Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*((61*Math.sin(cr))/20 - (117*Math.cos(cr))/5 + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "2*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) - 2*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) - (16800*Math.cos(cr) - 16800*cr*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) + (16800*Math.sin(cr) + 16800*cr*Math.cos(cr))*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) - 3*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 3*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - (5*Math.cos(cr) - 5*cr*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (5*Math.sin(cr) + 5*cr*Math.cos(cr))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "6*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.sin(cr) + cr*Math.cos(cr)) + 6*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.cos(cr) - cr*Math.sin(cr)) + (16800*Math.sin(cr) + 16800*cr*Math.cos(cr))*(Math.sin(cr) + cr*Math.cos(cr)) + (16800*Math.cos(cr) - 16800*cr*Math.sin(cr))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": "cr"
      },
      {
        "expr": "(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (5*Math.sin(cr) + 5*cr*Math.cos(cr))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(5*Math.cos(cr) - 5*cr*Math.sin(cr)) - 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(5*Math.sin(cr) + 5*cr*Math.cos(cr))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*Math.cos(cr + theta1)*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*Math.sin(cr + theta1)*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "4*Math.cos(cr + theta1)*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 4*Math.sin(cr + theta1)*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "- lambda2*Math.sin(phi2)*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambda2*Math.sin(phi2)*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- lambda2*(5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*(5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- (5*Math.sin(cr) + 5*cr*Math.cos(cr))*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - (5*Math.cos(cr) - 5*cr*Math.sin(cr))*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + (3*Math.cos(phi1)**2)/40 - (5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 82*Math.sin(phi1)**2 + (5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 41*Math.cos(theta2)**2*Math.sin(phi1)**2 + 123*Math.sin(phi1)**2*Math.sin(theta2)**2 + 15*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 15*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 1/40",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(Math.cos(cr) - cr*Math.sin(cr))*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (Math.sin(cr) + cr*Math.cos(cr))*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 15*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(Math.cos(cr) - cr*Math.sin(cr)) - 15*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(Math.sin(cr) + cr*Math.cos(cr))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + (3*Math.cos(phi1)**2)/40 + 82*Math.sin(phi1)**2 + 41*Math.cos(theta2)**2*Math.sin(phi1)**2 + (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 123*Math.sin(phi1)**2*Math.sin(theta2)**2 + 15*lambda1**2*Math.cos(cr + theta1)**2*Math.sin(phi1)**2 + 15*lambda1**2*Math.sin(cr + theta1)**2*Math.sin(phi1)**2 + 1/40",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.cos(theta2)*Math.sin(phi1)*Math.sin(theta2) - 2*Math.cos(phi2)*Math.sin(theta2)*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*Math.sin(phi2)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) - lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- Math.sin(cr + theta1)*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - Math.cos(cr + theta1)*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)/40 + 2*Math.cos(phi2)*((Math.cos(phi1)*Math.cos(phi2))/40 - (Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))/40) + 2*Math.sin(phi2)*(41*Math.cos(phi1)*Math.sin(phi2) + 41*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - lambda2*Math.sin(phi2)*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + lambda2*Math.sin(phi2)*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.sin(phi1)*Math.sin(theta2) - lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "82*Math.cos(theta2)*Math.sin(phi1)*Math.sin(theta2) - 82*Math.cos(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))/20 - 5*lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 5*lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr) + cr*Math.cos(cr)) - 5*lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.cos(theta2)*Math.sin(phi1)*Math.sin(theta2) - 82*Math.cos(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))/20 - 5*lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 5*lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "123*Math.cos(theta2)**2 + 41*Math.sin(theta2)**2 + 82*Math.cos(phi2)**2*Math.sin(theta2)**2 + (Math.sin(phi2)**2*Math.sin(theta2)**2)/20 + 5*lambda2**2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))**2 + 5*lambda2**2*Math.cos(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))**2 + 5*lambda2**2*Math.sin(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))**2 + 82",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.cos(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 5*lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(Math.cos(phi1) - phi1*Math.sin(phi1)) + 5*lambda2*Math.sin(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2**2*Math.sin(cr + theta1)*Math.sin(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2**2*Math.cos(cr + theta1)*Math.sin(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - (1639*Math.cos(phi2)*Math.sin(phi2)*Math.sin(theta2))/20 - 5*lambda2**2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.cos(theta2) + 5*lambda2**2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2**2*Math.cos(cr + theta1)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2**2*Math.sin(cr + theta1)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(cr + theta1)*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.cos(cr + theta1)*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "5*Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 5*Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 15*Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 15*Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "20*Math.cos(cr + theta1)*(Math.sin(cr) + cr*Math.cos(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 20*Math.sin(cr + theta1)*(Math.cos(cr) - cr*Math.sin(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "- 5*Math.sin(cr + theta1)*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 5*Math.cos(cr + theta1)*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.cos(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - lambda2*(5*Math.cos(phi1) - 5*phi1*Math.sin(phi1))*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)**2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "4*(5*Math.cos(phi1) - 5*phi1*Math.sin(phi1))*(Math.cos(phi1) - phi1*Math.sin(phi1)) + 20*Math.cos(cr + theta1)**2*(Math.sin(phi1) + phi1*Math.cos(phi1))**2 + 20*Math.sin(cr + theta1)**2*(Math.sin(phi1) + phi1*Math.cos(phi1))**2",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(cr + theta1)*Math.sin(phi2)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.cos(cr + theta1)*Math.sin(phi2)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*Math.cos(phi1) - 5*phi1*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(cr + theta1)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 5*lambda2*Math.cos(cr + theta1)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - lambda2*(5*Math.cos(phi1) - 5*phi1*Math.sin(phi1))*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(5*Math.cos(phi1) - 5*phi1*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*Math.cos(cr + theta1)*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1)) + 5*Math.sin(cr + theta1)*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)/40 + (Math.cos(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))/20 + 82*Math.sin(phi2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 5*lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- 5*lambda2*Math.sin(phi2)*(Math.sin(cr) + cr*Math.cos(cr))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.cos(cr) - cr*Math.sin(cr))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)/40 + (Math.cos(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))/20 + 82*Math.sin(phi2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*Math.sin(phi2)*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2*Math.sin(phi2)*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2**2*Math.sin(cr + theta1)*Math.sin(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2**2*Math.cos(cr + theta1)*Math.sin(phi2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - (1639*Math.cos(phi2)*Math.sin(phi2)*Math.sin(theta2))/20 - 5*lambda2**2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(cr + theta1)*Math.sin(phi2)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.cos(cr + theta1)*Math.sin(phi2)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1) - phi1*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi2)**2/20 + 82*Math.sin(phi2)**2 + 5*lambda2**2*Math.sin(phi2)**2*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))**2 + 5*lambda2**2*Math.sin(phi2)**2*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))**2 + 5*lambda2**2*Math.sin(phi1)**2*Math.sin(phi2)**2*Math.sin(theta2)**2 + 1/40",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2**2*Math.sin(phi2)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2**2*Math.sin(phi2)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2**2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(phi2)*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2*Math.sin(phi2)*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "82*Math.sin(phi1)*Math.sin(theta2) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr) + cr*Math.cos(cr)) - 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.sin(phi1)*Math.sin(theta2) - 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "82*Math.cos(theta2) + 5*lambda2**2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2**2*Math.cos(cr + theta1)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2**2*Math.sin(cr + theta1)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*Math.sin(cr + theta1)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 5*lambda2*Math.cos(cr + theta1)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 5*lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(phi1) - phi1*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2**2*Math.sin(phi2)*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + 5*lambda2**2*Math.sin(phi2)*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2**2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2**2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))**2 + 5*lambda2**2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))**2 + 5*lambda2**2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))**2 + 82",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + (5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- (5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(cr) + cr*Math.cos(cr)) - (5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - (5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(cr + theta1)*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*Math.cos(cr + theta1)*(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(5*Math.cos(phi1)*Math.cos(phi2) - 5*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(5*Math.cos(phi1)*Math.cos(phi2) - 5*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(phi1) - phi1*Math.sin(phi1)) - Math.cos(cr + theta1)*(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1)) + Math.sin(cr + theta1)*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + lambda2*Math.sin(phi2)*(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*Math.cos(phi1)*Math.cos(phi2) - 5*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(5*Math.cos(phi1)*Math.cos(phi2) - 5*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + (Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.cos(phi1)*Math.cos(phi2) - 5*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + (Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ]
  ],
  "Nstar": [
    [
      {
        "expr": "((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) + 3*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20 + 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + 3*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 2*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5)*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) + 2*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20)*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) - (10248*crd*Math.cos(cr) + 78624*crd*Math.sin(cr))*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) + (78624*crd*Math.cos(cr) - 10248*crd*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) - (89670*crd*Math.cos(cr) + 687960*crd*Math.sin(cr))*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100) + (687960*crd*Math.cos(cr) - 89670*crd*Math.sin(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - Math.cos(phi1)*((phid1*Math.sin(phi1))/40 - Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1))) - ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + (1639*phid1*Math.cos(phi1)*Math.sin(phi1))/10 + Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) - Math.cos(theta2)*Math.sin(phi1)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.sin(phi1)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100)*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr)) + 2*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25)*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) + ((117*Math.cos(cr))/25 - (61*Math.sin(cr))/100)*(33600*crd*Math.cos(cr) - 16800*cr*crd*Math.sin(cr)) + ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25)*(33600*crd*Math.sin(cr) + 16800*cr*crd*Math.cos(cr)) + 3*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 3*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + (10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) + 3*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + 3*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - Math.cos(phi1)*((phid1*Math.sin(phi1))/40 - Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1))) + (1639*phid1*Math.cos(phi1)*Math.sin(phi1))/10 + Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) - Math.cos(theta2)*Math.sin(phi1)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.sin(phi1)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.sin(phi2)*Math.sin(theta2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*thetad2*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.sin(phi2)*Math.sin(theta2)) - Math.cos(phi1)*(Math.cos(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1)) + Math.sin(theta2)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2))) + (5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + (5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + Math.cos(phi2)*Math.sin(theta2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.cos(phi2)*Math.sin(theta2))/40 - (thetad2*Math.cos(theta2)*Math.sin(phi2))/40) + 2*Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi2)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 41*thetad2*Math.sin(theta2) + Math.sin(phi2)*Math.sin(theta2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40)) + Math.cos(theta2)*Math.sin(phi1)*(Math.cos(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.cos(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "3*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - 3*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + (5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) - (5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "2*(Math.sin(phi2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.sin(phi2))/40)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 2*(Math.cos(phi2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi2))*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)) + (5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - Math.cos(theta2)*Math.sin(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) + Math.sin(phi1)*Math.sin(theta2)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 2*Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - Math.sin(phi2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))*((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + (5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "((61*Math.sin(cr))/100 - (117*Math.cos(cr))/25 + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + ((61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "(Math.cos(cr) - cr*Math.sin(cr))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - 3*(Math.sin(cr) + cr*Math.cos(cr))*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 3*(Math.cos(cr) - cr*Math.sin(cr))*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20 + 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - 2*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5)*(Math.sin(cr) + cr*Math.cos(cr)) - 2*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20)*(Math.cos(cr) - cr*Math.sin(cr)) - (10248*crd*Math.cos(cr) + 78624*crd*Math.sin(cr))*(Math.sin(cr) + cr*Math.cos(cr)) - (78624*crd*Math.cos(cr) - 10248*crd*Math.sin(cr))*(Math.cos(cr) - cr*Math.sin(cr)) - (Math.sin(cr) + cr*Math.cos(cr))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "6*(Math.sin(cr) + cr*Math.cos(cr))*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr)) - 6*(Math.cos(cr) - cr*Math.sin(cr))*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) + (Math.sin(cr) + cr*Math.cos(cr))*(33600*crd*Math.cos(cr) - 16800*cr*crd*Math.sin(cr)) - (Math.cos(cr) - cr*Math.sin(cr))*(33600*crd*Math.sin(cr) + 16800*cr*crd*Math.cos(cr))",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "(Math.cos(cr) - cr*Math.sin(cr))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - 3*(Math.sin(cr) + cr*Math.cos(cr))*(5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 3*(Math.cos(cr) - cr*Math.sin(cr))*(5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - (Math.sin(cr) + cr*Math.cos(cr))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- (Math.sin(cr) + cr*Math.cos(cr))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - (Math.cos(cr) - cr*Math.sin(cr))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "4*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.sin(cr) + cr*Math.cos(cr)) - 4*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.cos(cr) - cr*Math.sin(cr))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "- (Math.cos(cr) - cr*Math.sin(cr))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) - (Math.sin(cr) + cr*Math.cos(cr))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- (5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.cos(cr) - cr*Math.sin(cr)) - (Math.sin(cr) + cr*Math.cos(cr))*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- (Math.sin(cr) + cr*Math.cos(cr))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (Math.cos(cr) - cr*Math.sin(cr))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - Math.cos(phi1)*((phid1*Math.sin(phi1))/40 - Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1))) + (lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) + (1639*phid1*Math.cos(phi1)*Math.sin(phi1))/10 + Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) - Math.cos(theta2)*Math.sin(phi1)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.sin(phi1)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + 3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20 + 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) - (lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr)) - (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) - 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) + (lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - Math.cos(phi1)*((phid1*Math.sin(phi1))/40 - Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1))) + (1639*phid1*Math.cos(phi1)*Math.sin(phi1))/10 + Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) - Math.cos(theta2)*Math.sin(phi1)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.sin(phi1)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + 3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(Math.cos(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.sin(phi2)*Math.sin(theta2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*thetad2*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.sin(phi2)*Math.sin(theta2)) - Math.cos(phi1)*(Math.cos(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1)) + Math.sin(theta2)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2))) - (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + (lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(Math.cos(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + Math.cos(phi2)*Math.sin(theta2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.cos(phi2)*Math.sin(theta2))/40 - (thetad2*Math.cos(theta2)*Math.sin(phi2))/40) + 2*Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi2)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 41*thetad2*Math.sin(theta2) + Math.sin(phi2)*Math.sin(theta2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40)) + Math.cos(theta2)*Math.sin(phi1)*(Math.cos(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.cos(theta2)) + Math.sin(phi1)*Math.sin(theta2)*(Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "3*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) - (5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) - 3*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) - (5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) - (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) - 2*(Math.cos(phi2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi2))*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + 2*(Math.sin(phi2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.sin(phi2))/40)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.cos(theta2)*Math.sin(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) + Math.sin(phi1)*Math.sin(theta2)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 2*Math.sin(phi1)*Math.sin(theta2)*(Math.cos(phi2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - Math.sin(phi2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))*(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)) + 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - (5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "Math.cos(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + Math.sin(theta2)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.cos(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + 2*Math.cos(phi2)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*Math.sin(phi2)*Math.sin(theta2)*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - (1639*Math.cos(phi1)*Math.sin(phi1)*(crd + thetad1))/20 - lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr)) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*(Math.cos(phi1)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) - Math.cos(theta2)*Math.sin(phi1)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + Math.sin(theta2)*(Math.cos(phi1)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid1*Math.cos(phi1)*Math.cos(theta2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) + 41*thetad2*Math.sin(phi1)*Math.sin(theta2)) + 2*Math.cos(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.cos(phi1)*Math.sin(theta2) + 41*thetad2*Math.cos(theta2)*Math.sin(phi1)) + 2*Math.cos(phi2)*Math.sin(theta2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - 2*Math.sin(phi2)*Math.sin(theta2)*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - (1639*Math.cos(phi1)*Math.sin(phi1)*(crd + thetad1))/20 - lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*(Math.sin(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.sin(theta2)) + 2*Math.cos(theta2)*(Math.cos(phi2)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 41*thetad2*Math.sin(theta2) + Math.sin(phi2)*Math.sin(theta2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40)) - Math.sin(theta2)*(Math.cos(theta2)*(41*thetad2 + 41*crd*Math.cos(phi1) + 41*thetad1*Math.cos(phi1)) - 41*thetad2*Math.cos(theta2)) + lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2))) - 2*Math.sin(phi2)*Math.sin(theta2)*(Math.cos(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + Math.cos(phi2)*Math.sin(theta2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.cos(phi2)*Math.sin(theta2))/40 - (thetad2*Math.cos(theta2)*Math.sin(phi2))/40) - 2*Math.cos(phi2)*Math.sin(theta2)*(Math.cos(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.sin(phi2)*Math.sin(theta2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*thetad2*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.sin(phi2)*Math.sin(theta2)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(10*phid1*Math.sin(phi1) + 5*phi1*phid1*Math.cos(phi1))*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) + lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "Math.cos(theta2)*((crd*Math.cos(theta2)*Math.sin(phi1))/40 - (phid1*Math.sin(theta2))/40 + (thetad1*Math.cos(theta2)*Math.sin(phi1))/40) + Math.sin(theta2)*((phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) + 2*Math.cos(theta2)*(Math.cos(phi2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - Math.sin(phi2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + 2*Math.cos(phi2)*Math.sin(theta2)*(Math.cos(phi2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi2)) + 2*Math.sin(phi2)*Math.sin(theta2)*(Math.sin(phi2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.sin(phi2))/40) - lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) + 5*lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2))) - 2*Math.cos(phi2)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 2*Math.sin(phi2)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))) + lambda2*Math.sin(cr + theta1)*(5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))*(5*phid1*Math.cos(phi2)*Math.sin(phi1) + 5*phid2*Math.cos(phi1)*Math.sin(phi2) + 5*phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + 5*phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - 5*thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "3*Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((117*crd*Math.cos(cr))/5 - (61*crd*Math.sin(cr))/20 + 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 3*Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*((61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "4*Math.cos(cr + theta1)*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1)) + 4*Math.sin(cr + theta1)*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "3*Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - 3*Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - (Math.cos(phi1) - phi1*Math.sin(phi1))*(5*lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "4*Math.cos(cr + theta1)*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - 4*(10*phid1*Math.sin(phi1) + 5*phi1*phid1*Math.cos(phi1))*(Math.cos(phi1) - phi1*Math.sin(phi1)) + 4*Math.sin(cr + theta1)*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "(Math.cos(phi1) - phi1*Math.sin(phi1))*(5*lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) + 5*lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) + Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.sin(cr + theta1)*(5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - Math.cos(cr + theta1)*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))*(Math.sin(phi1) + phi1*Math.cos(phi1)) - (Math.cos(phi1) - phi1*Math.sin(phi1))*(5*lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (Math.cos(phi1) - phi1*Math.sin(phi1))*(5*phid1*Math.cos(phi2)*Math.sin(phi1) + 5*phid2*Math.cos(phi1)*Math.sin(phi2) + 5*phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + 5*phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - 5*thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - 2*Math.sin(phi2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - (phid1*Math.sin(phi1))/40 - 2*Math.cos(phi2)*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1)) - lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambda2*Math.sin(phi2)*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - 2*Math.sin(phi2)*((Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi1)*Math.cos(phi2) - Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 41*phid1*Math.sin(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + 41*thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)) - (phid1*Math.sin(phi1))/40 - 2*Math.cos(phi2)*((phid1*Math.cos(phi2)*Math.sin(phi1))/40 - (Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) + (phid2*Math.cos(phi1)*Math.sin(phi2))/40 + Math.sin(phi1)*Math.sin(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + (phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))/40 + (phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 - (thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))/40) - Math.sin(phi1)*Math.sin(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1)) + lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*Math.sin(phi2)*(Math.cos(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - Math.sin(phi2)*Math.sin(theta2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*thetad2*Math.cos(phi2)*Math.cos(theta2) + 41*phid2*Math.sin(phi2)*Math.sin(theta2)) - 2*Math.cos(phi2)*(Math.cos(theta2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + Math.cos(phi2)*Math.sin(theta2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.cos(phi2)*Math.sin(theta2))/40 - (thetad2*Math.cos(theta2)*Math.sin(phi2))/40) - Math.sin(theta2)*(41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - Math.cos(theta2)*(41*crd*Math.cos(theta2)*Math.sin(phi1) - 41*phid1*Math.sin(theta2) + 41*thetad1*Math.cos(theta2)*Math.sin(phi1)) + lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambda2*Math.sin(phi2)*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(10*phid1*Math.sin(phi1) + 5*phi1*phid1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "2*Math.cos(phi2)*(Math.sin(phi2)*(41*phid2 + 41*phid1*Math.cos(theta2) + 41*crd*Math.sin(phi1)*Math.sin(theta2) + 41*thetad1*Math.sin(phi1)*Math.sin(theta2)) - (phid2*Math.sin(phi2))/40) - 2*Math.sin(phi2)*(Math.cos(phi2)*(phid2/40 + (phid1*Math.cos(theta2))/40 + (crd*Math.sin(phi1)*Math.sin(theta2))/40 + (thetad1*Math.sin(phi1)*Math.sin(theta2))/40) - 41*phid2*Math.cos(phi2)) + lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) + lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) + lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) + 5*lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*Math.sin(phi2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 2*Math.cos(phi2)*(41*thetad2*Math.sin(phi2) + 41*crd*Math.cos(phi1)*Math.sin(phi2) + 41*thetad1*Math.cos(phi1)*Math.sin(phi2) - 41*phid1*Math.cos(phi2)*Math.sin(theta2) + 41*crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) + 41*thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) + lambda2*Math.sin(phi2)*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) + lambda2*Math.sin(phi2)*(5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)*(5*phid1*Math.cos(phi2)*Math.sin(phi1) + 5*phid2*Math.cos(phi1)*Math.sin(phi2) + 5*phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + 5*phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - 5*thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 82*phid1*Math.cos(phi1)*Math.sin(theta2) + 82*thetad2*Math.cos(theta2)*Math.sin(phi1) - lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) - lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - 2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)) + 82*phid1*Math.cos(phi1)*Math.sin(theta2) + 82*thetad2*Math.cos(theta2)*Math.sin(phi1) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(5*lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2))) - 82*thetad2*Math.sin(theta2) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + 2*Math.cos(phi2)*Math.sin(theta2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 2*Math.sin(phi2)*Math.sin(theta2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(10*phid1*Math.sin(phi1) + 5*phi1*phid1*Math.cos(phi1))*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "2*Math.cos(phi2)*((thetad2*Math.sin(phi2))/40 + (crd*Math.cos(phi1)*Math.sin(phi2))/40 + (thetad1*Math.cos(phi1)*Math.sin(phi2))/40 - (phid1*Math.cos(phi2)*Math.sin(theta2))/40 + (crd*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40 + (thetad1*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))/40) - 2*Math.sin(phi2)*(41*thetad2*Math.cos(phi2) + 41*crd*Math.cos(phi1)*Math.cos(phi2) + 41*thetad1*Math.cos(phi1)*Math.cos(phi2) + 41*phid1*Math.sin(phi2)*Math.sin(theta2) - 41*crd*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - 41*thetad1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) - lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(5*lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) + 5*lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(5*lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2))) + lambda2*(5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))*(5*phid1*Math.cos(phi2)*Math.sin(phi1) + 5*phid2*Math.cos(phi1)*Math.sin(phi2) + 5*phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + 5*phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - 5*thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (61*crd*Math.cos(cr))/20 + (117*crd*Math.sin(cr))/5 + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/5 + (61*crd*Math.sin(cr))/20 - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(10*crd*Math.sin(cr) + 5*cr*crd*Math.cos(cr)) - (Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(10*crd*Math.cos(cr) - 5*cr*crd*Math.sin(cr))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + 5*lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) + 5*lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)) - (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + 5*lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - 5*lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + 5*lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - 5*lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - 5*lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) + (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) + 5*lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))) - (Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - 5*lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) + 5*Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) - (Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - 5*Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))) - (10*phid1*Math.sin(phi1) + 5*phi1*phid1*Math.cos(phi1))*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1"
        ]
      },
      {
        "expr": "(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) + 5*lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) + 5*lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) + (Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))) + (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - 5*lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) + 5*lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) + 5*lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))) - (Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - 5*lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2))) + (5*lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - 5*lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)))*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + 5*phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) + (Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))*(5*phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - 5*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + 5*phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - 5*phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + 5*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))*(5*phid1*Math.cos(phi2)*Math.sin(phi1) + 5*phid2*Math.cos(phi1)*Math.sin(phi2) + 5*phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + 5*phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - 5*thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ]
  ],
  "T": [
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "493/100",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "1193/100",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "1193/100",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr)",
        "vars": [
          "cr",
          "trolley"
        ]
      },
      {
        "expr": "1193/100",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "1193/100 - lambda1*Math.cos(phi1)",
        "vars": [
          "lambda1",
          "phi1"
        ]
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "1193/100 - lambda1*Math.cos(phi1)",
        "vars": [
          "lambda1",
          "phi1"
        ]
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 + trolley*Math.cos(cr) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 + trolley*Math.sin(cr) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1",
          "trolley"
        ]
      },
      {
        "expr": "1193/100 - lambda1*Math.cos(phi1)",
        "vars": [
          "lambda1",
          "phi1"
        ]
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + trolley*Math.cos(cr) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2",
          "trolley"
        ]
      },
      {
        "expr": "(61*Math.cos(cr))/100 + (117*Math.sin(cr))/25 - lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + trolley*Math.sin(cr) + lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2",
          "trolley"
        ]
      },
      {
        "expr": "1193/100 - lambda1*Math.cos(phi1) - lambda2*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      }
    ]
  ],
  "B": [
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "-Math.sin(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "-Math.cos(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - (117*Math.sin(cr))/25 - (61*Math.cos(cr))/100 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "- lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "-lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - Math.cos(phi1)*Math.cos(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "-Math.cos(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ]
  ],
  "Bt": [
    [
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25",
        "vars": "cr"
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "- (61*Math.cos(cr))/100 - (117*Math.sin(cr))/25 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - (117*Math.sin(cr))/25 - (61*Math.cos(cr))/100 - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "(117*Math.cos(cr))/25 - (61*Math.sin(cr))/100 - lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr) - cr*Math.sin(cr)",
        "vars": "cr"
      },
      {
        "expr": "Math.sin(cr) + cr*Math.cos(cr)",
        "vars": "cr"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "-lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "-lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "- lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda1*Math.sin(cr + theta1)*Math.sin(phi1)",
        "vars": [
          "cr",
          "lambda1",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "-Math.sin(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "-Math.cos(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2))",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)",
        "vars": "theta2"
      },
      {
        "expr": "-Math.cos(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "phi2",
          "theta2"
        ]
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-Math.sin(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "phi1",
          "theta1"
        ]
      },
      {
        "expr": "phi1*Math.sin(phi1) - Math.cos(phi1)",
        "vars": "phi1"
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "Math.cos(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "-lambda2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.sin(phi2)",
        "vars": "phi2"
      },
      {
        "expr": "Math.cos(phi2)",
        "vars": "phi2"
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "-lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "lambda2",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1))",
        "vars": [
          "lambda2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "1",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "- Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2))",
        "vars": [
          "cr",
          "phi1",
          "phi2",
          "theta1",
          "theta2"
        ]
      },
      {
        "expr": "Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - Math.cos(phi1)*Math.cos(phi2)",
        "vars": [
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ]
  ],
  "Bdot": [
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25 - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "- Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25 - lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "2*phid1*Math.sin(phi1) + phi1*phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25 - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "- Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25 - lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "2*phid1*Math.sin(phi1) + phi1*phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "-thetad2*Math.sin(theta2)",
        "vars": [
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)*Math.cos(theta2) - thetad2*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)*Math.cos(theta2) - thetad2*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "-thetad2*Math.cos(theta2)",
        "vars": [
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-phid1*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "(61*crd*Math.sin(cr))/100 - (117*crd*Math.cos(cr))/25 - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "- Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "- (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25 - lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambdad1",
          "phi1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "2*phid1*Math.sin(phi1) + phi1*phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "-thetad2*Math.sin(theta2)",
        "vars": [
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.sin(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) - phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.sin(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) - phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "phid2*Math.sin(phi2)*Math.sin(theta2) - thetad2*Math.cos(phi2)*Math.cos(theta2)",
        "vars": [
          "phi2",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid2*Math.cos(phi2)",
        "vars": [
          "phi2",
          "phid2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) - phid2*Math.cos(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) - phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - phid1*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) - phid2*Math.cos(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) - phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - phid1*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "phid2*Math.cos(phi2)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi2)",
        "vars": [
          "phi2",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-phid2*Math.sin(phi2)",
        "vars": [
          "phi2",
          "phid2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (117*crd*Math.cos(cr))/25 + (61*crd*Math.sin(cr))/100 - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- 2*crd*Math.sin(cr) - cr*crd*Math.cos(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "lambdad2*(Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) + lambda2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - lambdad1*Math.cos(cr + theta1)*Math.sin(phi1) + lambda1*Math.sin(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.cos(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*Math.sin(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - lambdad2*Math.sin(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*Math.cos(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- Math.sin(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.cos(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2)*(crd + thetad1) + thetad2*Math.cos(cr + theta1)*Math.sin(theta2) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) - phid1*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) - lambdad2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambdad2*phi2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.cos(theta2) - Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambda2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid2*Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1)) - lambdad2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) + phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) - Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "- lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - (61*crd*Math.cos(cr))/100 - (117*crd*Math.sin(cr))/25 - lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "2*crd*Math.cos(cr) - cr*crd*Math.sin(cr)",
        "vars": [
          "cr",
          "crd"
        ]
      },
      {
        "expr": "- lambdad2*(Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)) - lambda2*(phid2*Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(theta2) + phid1*Math.sin(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) + phid1*Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) + Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)) - lambdad1*Math.sin(cr + theta1)*Math.sin(phi1) - lambda1*Math.cos(cr + theta1)*Math.sin(phi1)*(crd + thetad1) - lambdad1*phi1*Math.sin(cr + theta1)*Math.cos(phi1)",
        "vars": [
          "cr",
          "crd",
          "lambda1",
          "lambda2",
          "lambdad1",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "lambdad2*Math.cos(cr + theta1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*Math.cos(cr + theta1)*(phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)) - lambda2*Math.sin(cr + theta1)*(crd + thetad1)*(Math.cos(phi1)*Math.cos(phi2) - Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "Math.cos(cr + theta1)*(2*phid1*Math.cos(phi1) - phi1*phid1*Math.sin(phi1)) - Math.sin(cr + theta1)*(crd + thetad1)*(Math.sin(phi1) + phi1*Math.cos(phi1))",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phid1",
          "theta1",
          "thetad1"
        ]
      },
      {
        "expr": "lambda2*Math.sin(phi2)*(thetad2*Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(theta2)*(crd + thetad1) - thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)*(crd + thetad1)) - lambdad2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2)) - lambdad2*phi2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.cos(theta2) + Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "- lambdad2*(Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) + Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)) - lambda2*(Math.cos(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.sin(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(cr + theta1)*Math.sin(phi1)*Math.sin(phi2)*(crd + thetad1) + phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(phi2) + phid2*Math.cos(cr + theta1)*Math.cos(phi2)*Math.sin(phi1))",
        "vars": [
          "cr",
          "crd",
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      },
      {
        "expr": "phid1*Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi2)*(Math.sin(cr + theta1)*Math.sin(theta2) - Math.cos(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)) - Math.sin(phi2)*(Math.cos(cr + theta1)*Math.sin(theta2)*(crd + thetad1) + thetad2*Math.sin(cr + theta1)*Math.cos(theta2) + phid1*Math.cos(cr + theta1)*Math.cos(theta2)*Math.sin(phi1) + thetad2*Math.cos(cr + theta1)*Math.cos(phi1)*Math.sin(theta2) + Math.sin(cr + theta1)*Math.cos(phi1)*Math.cos(theta2)*(crd + thetad1)) - phid2*Math.cos(cr + theta1)*Math.sin(phi1)*Math.sin(phi2) - Math.sin(cr + theta1)*Math.cos(phi2)*Math.sin(phi1)*(crd + thetad1)",
        "vars": [
          "cr",
          "crd",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta1",
          "theta2",
          "thetad1",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "lambdad2*(Math.cos(phi2)*Math.sin(phi1) + Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2)) - lambda2*(phid2*Math.sin(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid1*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2))",
        "vars": [
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "2*phid1*Math.sin(phi1) + phi1*phid1*Math.cos(phi1)",
        "vars": [
          "phi1",
          "phid1"
        ]
      },
      {
        "expr": "- lambdad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) - lambdad2*phi1*Math.cos(phi1)*Math.sin(phi2)*Math.sin(theta2) - lambdad2*phi2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2) - lambdad2*theta2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2)",
        "vars": [
          "lambdad2",
          "phi1",
          "phi2",
          "theta2"
        ]
      },
      {
        "expr": "lambdad2*(Math.cos(phi1)*Math.sin(phi2) + Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1)) - lambda2*(phid1*Math.sin(phi1)*Math.sin(phi2) - phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) + phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) + thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2))",
        "vars": [
          "lambda2",
          "lambdad2",
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "phid1*Math.cos(phi2)*Math.sin(phi1) + phid2*Math.cos(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) + phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      }
    ],
    [
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid1*Math.cos(phi1)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phid1",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "-thetad2*Math.sin(theta2)",
        "vars": [
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.sin(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) - phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid2*Math.cos(phi1)*Math.cos(phi2) - phid1*Math.sin(phi1)*Math.sin(phi2) + phid1*Math.cos(phi1)*Math.cos(phi2)*Math.cos(theta2) - phid2*Math.cos(theta2)*Math.sin(phi1)*Math.sin(phi2) - thetad2*Math.cos(phi2)*Math.sin(phi1)*Math.sin(theta2)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "phid2*Math.sin(phi2)*Math.sin(theta2) - thetad2*Math.cos(phi2)*Math.cos(theta2)",
        "vars": [
          "phi2",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "phid2*Math.cos(phi2)",
        "vars": [
          "phi2",
          "phid2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) - phid2*Math.cos(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) - phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - phid1*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "thetad2*Math.sin(phi1)*Math.sin(phi2)*Math.sin(theta2) - phid2*Math.cos(phi1)*Math.sin(phi2) - phid1*Math.cos(phi1)*Math.cos(theta2)*Math.sin(phi2) - phid2*Math.cos(phi2)*Math.cos(theta2)*Math.sin(phi1) - phid1*Math.cos(phi2)*Math.sin(phi1)",
        "vars": [
          "phi1",
          "phi2",
          "phid1",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "phid2*Math.cos(phi2)*Math.sin(theta2) + thetad2*Math.cos(theta2)*Math.sin(phi2)",
        "vars": [
          "phi2",
          "phid2",
          "theta2",
          "thetad2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "-phid2*Math.sin(phi2)",
        "vars": [
          "phi2",
          "phid2"
        ]
      },
      {
        "expr": "0",
        "vars": []
      },
      {
        "expr": "0",
        "vars": []
      }
    ]
  ],
  "F": [
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-1442070",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "10000",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-164808",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "-981/20",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ],
    [
      {
        "expr": "0",
        "vars": []
      }
    ]
  ]
}